Splitting 0; NODE; {seq4: value: 0.11764705882352941, p: 1.0, seq1: value: 0.8125, p: 1.0, seq2: value: 0.8823529411764706, p: 1.0, seq0: value: 0.9375, p: 1.0, seq3: value: 0.625, p: 1.0, seq5: value: 0.17647058823529413, p: 1.0, parent: value: 0.11764705882352941, p: 1.0}; 0.625; No so far cutoffs. Find max distance in sorted values.
Splitting 0; NODE; {seq4: value: 0.11764705882352941, p: 1.0, seq1: value: 0.875, p: 1.0, seq2: value: 0.8235294117647058, p: 1.0, seq0: value: 0.9375, p: 1.0, seq3: value: 0.5625, p: 1.0, seq5: value: 0.11764705882352941, p: 1.0, parent: value: 0.11764705882352941, p: 1.0}; 0.5625; No so far cutoffs. Find max distance in sorted values.
Splitting 0; NODE; {seq4: value: 0.9411764705882353, p: 1.0, seq5: value: 0.8823529411764706, p: 1.0, parent: value: 0.11764705882352941, p: 1.0}; 0.8823529411764706; Find max distance in sorted_comp[0:first_comp_greater_than_guard_index + 1]
Splitting 2; NODE; {seq4: value: 0.9411764705882353, p: 1.0, seq5: value: 0.8823529411764706, p: 1.0, parent: value: 0.8823529411764706, p: 1.0}; 0.9411764705882353; No so far cutoffs. Find max distance in sorted values.
Splitting 2; NODE; {seq4: value: 1.0, p: 1.0, seq5: value: 0.8235294117647058, p: 1.0, parent: value: 0.8823529411764706, p: 1.0}; 1.0; No so far cutoffs. Find max distance in sorted values.
Splitting 2; NODE; {seq5: value: 1.0, p: 1.0, parent: value: 0.8823529411764706, p: 1.0}; 1.0; guard > max(compatibilities). Find max distance in sorted values.
Splitting 1; NODE; {seq1: value: 0.875, p: 1.0, seq2: value: 0.8235294117647058, p: 1.0, seq0: value: 0.9375, p: 1.0, seq3: value: 0.5625, p: 1.0, parent: value: 0.5625, p: 1.0}; 0.8235294117647058; No so far cutoffs. Find max distance in sorted values.
Splitting 1; NODE; {seq1: value: 0.8125, p: 1.0, seq2: value: 0.8235294117647058, p: 1.0, seq0: value: 1.0, p: 1.0, seq3: value: 0.5625, p: 1.0, parent: value: 0.5625, p: 1.0}; 0.8125; No so far cutoffs. Find max distance in sorted values.
Splitting 1; NODE; {seq3: value: 1.0, p: 1.0, parent: value: 0.5625, p: 1.0}; 1.0; Find max distance in sorted_comp[0:first_comp_greater_than_guard_index + 1]
Splitting 5; NODE; {seq1: value: 0.8125, p: 1.0, seq2: value: 0.8235294117647058, p: 1.0, seq0: value: 1.0, p: 1.0, parent: value: 0.8125, p: 1.0}; 1.0; No so far cutoffs. Find max distance in sorted values.
Splitting 5; NODE; {seq1: value: 0.8125, p: 1.0, seq2: value: 0.8235294117647058, p: 1.0, seq0: value: 1.0, p: 1.0, parent: value: 0.8125, p: 1.0}; 1.0; No so far cutoffs. Find max distance in sorted values.
Splitting 5; NODE; {seq1: value: 1.0, p: 1.0, seq2: value: 0.7647058823529411, p: 1.0, parent: value: 0.8125, p: 1.0}; 1.0; guard > max(compatibilities). Find max distance in sorted values.
Splitting 5; NODE; {seq1: value: 1.0, p: 1.0, seq2: value: 0.7647058823529411, p: 1.0, parent: value: 0.8125, p: 1.0}; 1.0; guard > max(compatibilities). Find max distance in sorted values.
Splitting 5; NODE; {seq2: value: 1.0, p: 1.0, parent: value: 0.8125, p: 1.0}; 1.0; guard > max(compatibilities). Find max distance in sorted values.
